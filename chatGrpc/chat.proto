syntax = "proto3";

option go_package = ".";

package chat;

service Chat {
  rpc CreateUser(CreateUserReq) returns (CreateUserResp) {}
  rpc Synchronize(SynchronizeReq) returns (SynchronizeResp) {}
  rpc PutMsg(PutMsgReq) returns (PutMsgResp) {}
}

message UserKey {
  string name = 1;
  bytes privKey = 2;
  bytes pubKey = 3;
}

message ManyUserKeys {
    repeated UserKey userKeys = 1;
}

message CreateUserReq { string name = 1; }

message CreateUserResp {}

message UserSeqNum {
  string name = 1;
  uint64 seqNum = 2;
}

message SynchronizeReq {
  string name = 1;
  map<string, UserSeqNum> seqNums = 2;
}

message MsgData {
  string sender = 1;
  string msg = 2;
  uint64 seqNum = 3;
  bytes time = 4;
}

message SynchronizeResp { repeated MsgData msgs = 1; }

message PutMsgReq { MsgData msgData = 1; }

message PutMsgResp {}

/*
Want:
    - Multiple people added to same group to be able to send msg's there
    and get the latest msg's back from everyone.

Modifies log:
PutMsg: add a msg to the server's list of msgs, sends group # to server as well.

Other server op:
CreateUser: creates username in server mem
CreateGroup: creates new group, gets back GroupID
Synchronize: synch log with server.

Just client op:
LoginUser: provide username, set that.
JoinGroup: provide GroupID, just a client op to set the group # in exchanges.
ListMsgs: list all messages so far, just a client op.
*/