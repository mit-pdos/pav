// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rpc/photo_sharing.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharerClient is the client API for Sharer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharerClient interface {
	PutPhoto(ctx context.Context, in *PutPhotoReq, opts ...grpc.CallOption) (*PutPhotoResp, error)
	GetPhoto(ctx context.Context, in *GetPhotoReq, opts ...grpc.CallOption) (*GetPhotoResp, error)
	ListPhotos(ctx context.Context, in *ListPhotosReq, opts ...grpc.CallOption) (*ListPhotosResp, error)
}

type sharerClient struct {
	cc grpc.ClientConnInterface
}

func NewSharerClient(cc grpc.ClientConnInterface) SharerClient {
	return &sharerClient{cc}
}

func (c *sharerClient) PutPhoto(ctx context.Context, in *PutPhotoReq, opts ...grpc.CallOption) (*PutPhotoResp, error) {
	out := new(PutPhotoResp)
	err := c.cc.Invoke(ctx, "/photo_sharing.Sharer/PutPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharerClient) GetPhoto(ctx context.Context, in *GetPhotoReq, opts ...grpc.CallOption) (*GetPhotoResp, error) {
	out := new(GetPhotoResp)
	err := c.cc.Invoke(ctx, "/photo_sharing.Sharer/GetPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharerClient) ListPhotos(ctx context.Context, in *ListPhotosReq, opts ...grpc.CallOption) (*ListPhotosResp, error) {
	out := new(ListPhotosResp)
	err := c.cc.Invoke(ctx, "/photo_sharing.Sharer/ListPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharerServer is the server API for Sharer service.
// All implementations must embed UnimplementedSharerServer
// for forward compatibility
type SharerServer interface {
	PutPhoto(context.Context, *PutPhotoReq) (*PutPhotoResp, error)
	GetPhoto(context.Context, *GetPhotoReq) (*GetPhotoResp, error)
	ListPhotos(context.Context, *ListPhotosReq) (*ListPhotosResp, error)
	mustEmbedUnimplementedSharerServer()
}

// UnimplementedSharerServer must be embedded to have forward compatible implementations.
type UnimplementedSharerServer struct {
}

func (UnimplementedSharerServer) PutPhoto(context.Context, *PutPhotoReq) (*PutPhotoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPhoto not implemented")
}
func (UnimplementedSharerServer) GetPhoto(context.Context, *GetPhotoReq) (*GetPhotoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhoto not implemented")
}
func (UnimplementedSharerServer) ListPhotos(context.Context, *ListPhotosReq) (*ListPhotosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhotos not implemented")
}
func (UnimplementedSharerServer) mustEmbedUnimplementedSharerServer() {}

// UnsafeSharerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharerServer will
// result in compilation errors.
type UnsafeSharerServer interface {
	mustEmbedUnimplementedSharerServer()
}

func RegisterSharerServer(s grpc.ServiceRegistrar, srv SharerServer) {
	s.RegisterService(&Sharer_ServiceDesc, srv)
}

func _Sharer_PutPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharerServer).PutPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo_sharing.Sharer/PutPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharerServer).PutPhoto(ctx, req.(*PutPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sharer_GetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharerServer).GetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo_sharing.Sharer/GetPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharerServer).GetPhoto(ctx, req.(*GetPhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sharer_ListPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhotosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharerServer).ListPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photo_sharing.Sharer/ListPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharerServer).ListPhotos(ctx, req.(*ListPhotosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sharer_ServiceDesc is the grpc.ServiceDesc for Sharer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sharer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo_sharing.Sharer",
	HandlerType: (*SharerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutPhoto",
			Handler:    _Sharer_PutPhoto_Handler,
		},
		{
			MethodName: "GetPhoto",
			Handler:    _Sharer_GetPhoto_Handler,
		},
		{
			MethodName: "ListPhotos",
			Handler:    _Sharer_ListPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/photo_sharing.proto",
}
